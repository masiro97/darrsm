// Generated by gencpp from file dynamixel_workbench_msgs/MotorState.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_MOTORSTATE_H
#define DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_workbench_msgs
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : motor_model()
    , id(0)
    , torque_enable(0)
    , max_position_limit(0)
    , min_position_limit(0)
    , ccw_angle_limit(0)
    , cw_angle_limit(0)
    , goal_position(0)
    , goal_velocity(0)
    , goal_current(0)
    , moving_speed(0)
    , goal_acceleration(0)
    , profile_velocity(0)
    , profile_acceleration(0)
    , present_position(0)
    , present_velocity(0)
    , present_current(0)
    , moving(0)  {
    }
  MotorState_(const ContainerAllocator& _alloc)
    : motor_model(_alloc)
    , id(0)
    , torque_enable(0)
    , max_position_limit(0)
    , min_position_limit(0)
    , ccw_angle_limit(0)
    , cw_angle_limit(0)
    , goal_position(0)
    , goal_velocity(0)
    , goal_current(0)
    , moving_speed(0)
    , goal_acceleration(0)
    , profile_velocity(0)
    , profile_acceleration(0)
    , present_position(0)
    , present_velocity(0)
    , present_current(0)
    , moving(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motor_model_type;
  _motor_model_type motor_model;

   typedef int64_t _id_type;
  _id_type id;

   typedef int64_t _torque_enable_type;
  _torque_enable_type torque_enable;

   typedef int64_t _max_position_limit_type;
  _max_position_limit_type max_position_limit;

   typedef int64_t _min_position_limit_type;
  _min_position_limit_type min_position_limit;

   typedef int64_t _ccw_angle_limit_type;
  _ccw_angle_limit_type ccw_angle_limit;

   typedef int64_t _cw_angle_limit_type;
  _cw_angle_limit_type cw_angle_limit;

   typedef int64_t _goal_position_type;
  _goal_position_type goal_position;

   typedef int64_t _goal_velocity_type;
  _goal_velocity_type goal_velocity;

   typedef int64_t _goal_current_type;
  _goal_current_type goal_current;

   typedef int64_t _moving_speed_type;
  _moving_speed_type moving_speed;

   typedef int64_t _goal_acceleration_type;
  _goal_acceleration_type goal_acceleration;

   typedef int64_t _profile_velocity_type;
  _profile_velocity_type profile_velocity;

   typedef int64_t _profile_acceleration_type;
  _profile_acceleration_type profile_acceleration;

   typedef int64_t _present_position_type;
  _present_position_type present_position;

   typedef int64_t _present_velocity_type;
  _present_velocity_type present_velocity;

   typedef int64_t _present_current_type;
  _present_current_type present_current;

   typedef int64_t _moving_type;
  _moving_type moving;




  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::dynamixel_workbench_msgs::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::dynamixel_workbench_msgs::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::dynamixel_workbench_msgs::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dynamixel_workbench_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dynamixel_workbench_msgs': ['/home/cun/catkin_ws/src/dynamixel-workbench/dynamixel_workbench_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0711dcad28e6606a0354ecd9e57f2db8";
  }

  static const char* value(const ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0711dcad28e6606aULL;
  static const uint64_t static_value2 = 0x0354ecd9e57f2db8ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_workbench_msgs/MotorState";
  }

  static const char* value(const ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Published by dynamixel_workbench_controllers\n\
# This message represents status of Dynamixels in present.\n\
\n\
string motor_model\n\
int64 id\n\
int64 torque_enable\n\
int64 max_position_limit\n\
int64 min_position_limit\n\
int64 ccw_angle_limit\n\
int64 cw_angle_limit\n\
int64 goal_position\n\
int64 goal_velocity\n\
int64 goal_current\n\
int64 moving_speed\n\
int64 goal_acceleration\n\
int64 profile_velocity\n\
int64 profile_acceleration\n\
int64 present_position\n\
int64 present_velocity\n\
int64 present_current\n\
int64 moving\n\
";
  }

  static const char* value(const ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_model);
      stream.next(m.id);
      stream.next(m.torque_enable);
      stream.next(m.max_position_limit);
      stream.next(m.min_position_limit);
      stream.next(m.ccw_angle_limit);
      stream.next(m.cw_angle_limit);
      stream.next(m.goal_position);
      stream.next(m.goal_velocity);
      stream.next(m.goal_current);
      stream.next(m.moving_speed);
      stream.next(m.goal_acceleration);
      stream.next(m.profile_velocity);
      stream.next(m.profile_acceleration);
      stream.next(m.present_position);
      stream.next(m.present_velocity);
      stream.next(m.present_current);
      stream.next(m.moving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_workbench_msgs::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "motor_model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motor_model);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "torque_enable: ";
    Printer<int64_t>::stream(s, indent + "  ", v.torque_enable);
    s << indent << "max_position_limit: ";
    Printer<int64_t>::stream(s, indent + "  ", v.max_position_limit);
    s << indent << "min_position_limit: ";
    Printer<int64_t>::stream(s, indent + "  ", v.min_position_limit);
    s << indent << "ccw_angle_limit: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ccw_angle_limit);
    s << indent << "cw_angle_limit: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cw_angle_limit);
    s << indent << "goal_position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_position);
    s << indent << "goal_velocity: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_velocity);
    s << indent << "goal_current: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_current);
    s << indent << "moving_speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.moving_speed);
    s << indent << "goal_acceleration: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_acceleration);
    s << indent << "profile_velocity: ";
    Printer<int64_t>::stream(s, indent + "  ", v.profile_velocity);
    s << indent << "profile_acceleration: ";
    Printer<int64_t>::stream(s, indent + "  ", v.profile_acceleration);
    s << indent << "present_position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.present_position);
    s << indent << "present_velocity: ";
    Printer<int64_t>::stream(s, indent + "  ", v.present_velocity);
    s << indent << "present_current: ";
    Printer<int64_t>::stream(s, indent + "  ", v.present_current);
    s << indent << "moving: ";
    Printer<int64_t>::stream(s, indent + "  ", v.moving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_MOTORSTATE_H
