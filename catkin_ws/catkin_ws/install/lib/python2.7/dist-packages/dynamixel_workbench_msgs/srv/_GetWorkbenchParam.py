# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dynamixel_workbench_msgs/GetWorkbenchParamRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetWorkbenchParamRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "dynamixel_workbench_msgs/GetWorkbenchParamRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetWorkbenchParamRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dynamixel_workbench_msgs/GetWorkbenchParamResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dynamixel_workbench_msgs.msg

class GetWorkbenchParamResponse(genpy.Message):
  _md5sum = "05c27902b9ce2d738f101ada682a9436"
  _type = "dynamixel_workbench_msgs/GetWorkbenchParamResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
WorkbenchParam workbench_parameter


================================================================================
MSG: dynamixel_workbench_msgs/WorkbenchParam
# Published by dynamixel_workbench_single_manager_gui
# This message sends information of dynamixel_workbench_single_manager's parameter to dynamixel_workbench_single_manager_gui

string device_name
uint64 baud_rate
uint16 protocol_version
string model_name
uint16 model_id
uint16 model_number
"""
  __slots__ = ['workbench_parameter']
  _slot_types = ['dynamixel_workbench_msgs/WorkbenchParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       workbench_parameter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetWorkbenchParamResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.workbench_parameter is None:
        self.workbench_parameter = dynamixel_workbench_msgs.msg.WorkbenchParam()
    else:
      self.workbench_parameter = dynamixel_workbench_msgs.msg.WorkbenchParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.workbench_parameter.device_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_QH().pack(_x.workbench_parameter.baud_rate, _x.workbench_parameter.protocol_version))
      _x = self.workbench_parameter.model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2H().pack(_x.workbench_parameter.model_id, _x.workbench_parameter.model_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.workbench_parameter is None:
        self.workbench_parameter = dynamixel_workbench_msgs.msg.WorkbenchParam()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workbench_parameter.device_name = str[start:end].decode('utf-8')
      else:
        self.workbench_parameter.device_name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.workbench_parameter.baud_rate, _x.workbench_parameter.protocol_version,) = _get_struct_QH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workbench_parameter.model_name = str[start:end].decode('utf-8')
      else:
        self.workbench_parameter.model_name = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.workbench_parameter.model_id, _x.workbench_parameter.model_number,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.workbench_parameter.device_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_QH().pack(_x.workbench_parameter.baud_rate, _x.workbench_parameter.protocol_version))
      _x = self.workbench_parameter.model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2H().pack(_x.workbench_parameter.model_id, _x.workbench_parameter.model_number))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.workbench_parameter is None:
        self.workbench_parameter = dynamixel_workbench_msgs.msg.WorkbenchParam()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workbench_parameter.device_name = str[start:end].decode('utf-8')
      else:
        self.workbench_parameter.device_name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.workbench_parameter.baud_rate, _x.workbench_parameter.protocol_version,) = _get_struct_QH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workbench_parameter.model_name = str[start:end].decode('utf-8')
      else:
        self.workbench_parameter.model_name = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.workbench_parameter.model_id, _x.workbench_parameter.model_number,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QH = None
def _get_struct_QH():
    global _struct_QH
    if _struct_QH is None:
        _struct_QH = struct.Struct("<QH")
    return _struct_QH
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
class GetWorkbenchParam(object):
  _type          = 'dynamixel_workbench_msgs/GetWorkbenchParam'
  _md5sum = '05c27902b9ce2d738f101ada682a9436'
  _request_class  = GetWorkbenchParamRequest
  _response_class = GetWorkbenchParamResponse
