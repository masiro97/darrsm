# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dynamixel_workbench_msgs/MotorState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorState(genpy.Message):
  _md5sum = "0711dcad28e6606a0354ecd9e57f2db8"
  _type = "dynamixel_workbench_msgs/MotorState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Published by dynamixel_workbench_controllers
# This message represents status of Dynamixels in present.

string motor_model
int64 id
int64 torque_enable
int64 max_position_limit
int64 min_position_limit
int64 ccw_angle_limit
int64 cw_angle_limit
int64 goal_position
int64 goal_velocity
int64 goal_current
int64 moving_speed
int64 goal_acceleration
int64 profile_velocity
int64 profile_acceleration
int64 present_position
int64 present_velocity
int64 present_current
int64 moving
"""
  __slots__ = ['motor_model','id','torque_enable','max_position_limit','min_position_limit','ccw_angle_limit','cw_angle_limit','goal_position','goal_velocity','goal_current','moving_speed','goal_acceleration','profile_velocity','profile_acceleration','present_position','present_velocity','present_current','moving']
  _slot_types = ['string','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_model,id,torque_enable,max_position_limit,min_position_limit,ccw_angle_limit,cw_angle_limit,goal_position,goal_velocity,goal_current,moving_speed,goal_acceleration,profile_velocity,profile_acceleration,present_position,present_velocity,present_current,moving

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motor_model is None:
        self.motor_model = ''
      if self.id is None:
        self.id = 0
      if self.torque_enable is None:
        self.torque_enable = 0
      if self.max_position_limit is None:
        self.max_position_limit = 0
      if self.min_position_limit is None:
        self.min_position_limit = 0
      if self.ccw_angle_limit is None:
        self.ccw_angle_limit = 0
      if self.cw_angle_limit is None:
        self.cw_angle_limit = 0
      if self.goal_position is None:
        self.goal_position = 0
      if self.goal_velocity is None:
        self.goal_velocity = 0
      if self.goal_current is None:
        self.goal_current = 0
      if self.moving_speed is None:
        self.moving_speed = 0
      if self.goal_acceleration is None:
        self.goal_acceleration = 0
      if self.profile_velocity is None:
        self.profile_velocity = 0
      if self.profile_acceleration is None:
        self.profile_acceleration = 0
      if self.present_position is None:
        self.present_position = 0
      if self.present_velocity is None:
        self.present_velocity = 0
      if self.present_current is None:
        self.present_current = 0
      if self.moving is None:
        self.moving = 0
    else:
      self.motor_model = ''
      self.id = 0
      self.torque_enable = 0
      self.max_position_limit = 0
      self.min_position_limit = 0
      self.ccw_angle_limit = 0
      self.cw_angle_limit = 0
      self.goal_position = 0
      self.goal_velocity = 0
      self.goal_current = 0
      self.moving_speed = 0
      self.goal_acceleration = 0
      self.profile_velocity = 0
      self.profile_acceleration = 0
      self.present_position = 0
      self.present_velocity = 0
      self.present_current = 0
      self.moving = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.motor_model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_17q().pack(_x.id, _x.torque_enable, _x.max_position_limit, _x.min_position_limit, _x.ccw_angle_limit, _x.cw_angle_limit, _x.goal_position, _x.goal_velocity, _x.goal_current, _x.moving_speed, _x.goal_acceleration, _x.profile_velocity, _x.profile_acceleration, _x.present_position, _x.present_velocity, _x.present_current, _x.moving))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_model = str[start:end].decode('utf-8')
      else:
        self.motor_model = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.id, _x.torque_enable, _x.max_position_limit, _x.min_position_limit, _x.ccw_angle_limit, _x.cw_angle_limit, _x.goal_position, _x.goal_velocity, _x.goal_current, _x.moving_speed, _x.goal_acceleration, _x.profile_velocity, _x.profile_acceleration, _x.present_position, _x.present_velocity, _x.present_current, _x.moving,) = _get_struct_17q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.motor_model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_17q().pack(_x.id, _x.torque_enable, _x.max_position_limit, _x.min_position_limit, _x.ccw_angle_limit, _x.cw_angle_limit, _x.goal_position, _x.goal_velocity, _x.goal_current, _x.moving_speed, _x.goal_acceleration, _x.profile_velocity, _x.profile_acceleration, _x.present_position, _x.present_velocity, _x.present_current, _x.moving))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_model = str[start:end].decode('utf-8')
      else:
        self.motor_model = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.id, _x.torque_enable, _x.max_position_limit, _x.min_position_limit, _x.ccw_angle_limit, _x.cw_angle_limit, _x.goal_position, _x.goal_velocity, _x.goal_current, _x.moving_speed, _x.goal_acceleration, _x.profile_velocity, _x.profile_acceleration, _x.present_position, _x.present_velocity, _x.present_current, _x.moving,) = _get_struct_17q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17q = None
def _get_struct_17q():
    global _struct_17q
    if _struct_17q is None:
        _struct_17q = struct.Struct("<17q")
    return _struct_17q
