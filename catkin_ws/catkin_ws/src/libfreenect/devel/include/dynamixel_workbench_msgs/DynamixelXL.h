// Generated by gencpp from file dynamixel_workbench_msgs/DynamixelXL.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_DYNAMIXELXL_H
#define DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_DYNAMIXELXL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_workbench_msgs
{
template <class ContainerAllocator>
struct DynamixelXL_
{
  typedef DynamixelXL_<ContainerAllocator> Type;

  DynamixelXL_()
    : model_number(0)
    , version_of_firmware(0)
    , id(0)
    , baud_rate(0)
    , return_delay_time(0)
    , cw_angle_limit(0)
    , ccw_angle_limit(0)
    , control_mode(0)
    , limit_temperature(0)
    , down_limit_voltage(0)
    , up_limit_voltage(0)
    , max_torque(0)
    , return_level(0)
    , alarm_shutdown(0)
    , torque_enable(false)
    , led(0)
    , d_gain(0)
    , i_gain(0)
    , p_gain(0)
    , goal_position(0)
    , goal_velocity(0)
    , goal_torque(0)
    , present_position(0)
    , present_velocity(0)
    , present_load(0)
    , present_voltage(0)
    , present_temperature(0)
    , registered_instruction(false)
    , moving(false)
    , hardware_error_status(0)
    , punch(0)  {
    }
  DynamixelXL_(const ContainerAllocator& _alloc)
    : model_number(0)
    , version_of_firmware(0)
    , id(0)
    , baud_rate(0)
    , return_delay_time(0)
    , cw_angle_limit(0)
    , ccw_angle_limit(0)
    , control_mode(0)
    , limit_temperature(0)
    , down_limit_voltage(0)
    , up_limit_voltage(0)
    , max_torque(0)
    , return_level(0)
    , alarm_shutdown(0)
    , torque_enable(false)
    , led(0)
    , d_gain(0)
    , i_gain(0)
    , p_gain(0)
    , goal_position(0)
    , goal_velocity(0)
    , goal_torque(0)
    , present_position(0)
    , present_velocity(0)
    , present_load(0)
    , present_voltage(0)
    , present_temperature(0)
    , registered_instruction(false)
    , moving(false)
    , hardware_error_status(0)
    , punch(0)  {
  (void)_alloc;
    }



   typedef int64_t _model_number_type;
  _model_number_type model_number;

   typedef int64_t _version_of_firmware_type;
  _version_of_firmware_type version_of_firmware;

   typedef int8_t _id_type;
  _id_type id;

   typedef int64_t _baud_rate_type;
  _baud_rate_type baud_rate;

   typedef int64_t _return_delay_time_type;
  _return_delay_time_type return_delay_time;

   typedef int64_t _cw_angle_limit_type;
  _cw_angle_limit_type cw_angle_limit;

   typedef int64_t _ccw_angle_limit_type;
  _ccw_angle_limit_type ccw_angle_limit;

   typedef int64_t _control_mode_type;
  _control_mode_type control_mode;

   typedef int64_t _limit_temperature_type;
  _limit_temperature_type limit_temperature;

   typedef int64_t _down_limit_voltage_type;
  _down_limit_voltage_type down_limit_voltage;

   typedef int64_t _up_limit_voltage_type;
  _up_limit_voltage_type up_limit_voltage;

   typedef int64_t _max_torque_type;
  _max_torque_type max_torque;

   typedef int64_t _return_level_type;
  _return_level_type return_level;

   typedef int64_t _alarm_shutdown_type;
  _alarm_shutdown_type alarm_shutdown;

   typedef uint8_t _torque_enable_type;
  _torque_enable_type torque_enable;

   typedef int64_t _led_type;
  _led_type led;

   typedef int64_t _d_gain_type;
  _d_gain_type d_gain;

   typedef int64_t _i_gain_type;
  _i_gain_type i_gain;

   typedef int64_t _p_gain_type;
  _p_gain_type p_gain;

   typedef int64_t _goal_position_type;
  _goal_position_type goal_position;

   typedef int64_t _goal_velocity_type;
  _goal_velocity_type goal_velocity;

   typedef int64_t _goal_torque_type;
  _goal_torque_type goal_torque;

   typedef int64_t _present_position_type;
  _present_position_type present_position;

   typedef int64_t _present_velocity_type;
  _present_velocity_type present_velocity;

   typedef int64_t _present_load_type;
  _present_load_type present_load;

   typedef int64_t _present_voltage_type;
  _present_voltage_type present_voltage;

   typedef int64_t _present_temperature_type;
  _present_temperature_type present_temperature;

   typedef uint8_t _registered_instruction_type;
  _registered_instruction_type registered_instruction;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef int64_t _hardware_error_status_type;
  _hardware_error_status_type hardware_error_status;

   typedef int64_t _punch_type;
  _punch_type punch;




  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> const> ConstPtr;

}; // struct DynamixelXL_

typedef ::dynamixel_workbench_msgs::DynamixelXL_<std::allocator<void> > DynamixelXL;

typedef boost::shared_ptr< ::dynamixel_workbench_msgs::DynamixelXL > DynamixelXLPtr;
typedef boost::shared_ptr< ::dynamixel_workbench_msgs::DynamixelXL const> DynamixelXLConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dynamixel_workbench_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dynamixel_workbench_msgs': ['/home/cun/catkin_ws/src/dynamixel-workbench/dynamixel_workbench_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dab3e5c85b84435fdfe6c62de04c44fd";
  }

  static const char* value(const ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdab3e5c85b84435fULL;
  static const uint64_t static_value2 = 0xdfe6c62de04c44fdULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_workbench_msgs/DynamixelXL";
  }

  static const char* value(const ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Published by dynamixel_workbench_single_manager and Subscribed by dynamixel_workbench_single_manager_gui\n\
# This message is compatible with control table of Dynamixel XL Series (XL-320)\n\
# and it is linked to XL_320.device in dynamixel_workbench_toolbox/dynamixel/XL folder\n\
# If you want to specific information about control table, please follow the link (http://support.robotis.com/en/)\n\
\n\
int64 model_number\n\
int64 version_of_firmware\n\
int8 id\n\
int64 baud_rate\n\
int64 return_delay_time\n\
int64 cw_angle_limit\n\
int64 ccw_angle_limit\n\
int64 control_mode\n\
int64 limit_temperature\n\
int64 down_limit_voltage\n\
int64 up_limit_voltage\n\
int64 max_torque\n\
int64 return_level\n\
int64 alarm_shutdown\n\
bool torque_enable\n\
int64 led\n\
int64 d_gain\n\
int64 i_gain\n\
int64 p_gain\n\
int64 goal_position\n\
int64 goal_velocity\n\
int64 goal_torque\n\
int64 present_position\n\
int64 present_velocity\n\
int64 present_load\n\
int64 present_voltage\n\
int64 present_temperature\n\
bool registered_instruction\n\
bool moving\n\
int64 hardware_error_status\n\
int64 punch\n\
";
  }

  static const char* value(const ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_number);
      stream.next(m.version_of_firmware);
      stream.next(m.id);
      stream.next(m.baud_rate);
      stream.next(m.return_delay_time);
      stream.next(m.cw_angle_limit);
      stream.next(m.ccw_angle_limit);
      stream.next(m.control_mode);
      stream.next(m.limit_temperature);
      stream.next(m.down_limit_voltage);
      stream.next(m.up_limit_voltage);
      stream.next(m.max_torque);
      stream.next(m.return_level);
      stream.next(m.alarm_shutdown);
      stream.next(m.torque_enable);
      stream.next(m.led);
      stream.next(m.d_gain);
      stream.next(m.i_gain);
      stream.next(m.p_gain);
      stream.next(m.goal_position);
      stream.next(m.goal_velocity);
      stream.next(m.goal_torque);
      stream.next(m.present_position);
      stream.next(m.present_velocity);
      stream.next(m.present_load);
      stream.next(m.present_voltage);
      stream.next(m.present_temperature);
      stream.next(m.registered_instruction);
      stream.next(m.moving);
      stream.next(m.hardware_error_status);
      stream.next(m.punch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DynamixelXL_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_workbench_msgs::DynamixelXL_<ContainerAllocator>& v)
  {
    s << indent << "model_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.model_number);
    s << indent << "version_of_firmware: ";
    Printer<int64_t>::stream(s, indent + "  ", v.version_of_firmware);
    s << indent << "id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id);
    s << indent << "baud_rate: ";
    Printer<int64_t>::stream(s, indent + "  ", v.baud_rate);
    s << indent << "return_delay_time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.return_delay_time);
    s << indent << "cw_angle_limit: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cw_angle_limit);
    s << indent << "ccw_angle_limit: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ccw_angle_limit);
    s << indent << "control_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "limit_temperature: ";
    Printer<int64_t>::stream(s, indent + "  ", v.limit_temperature);
    s << indent << "down_limit_voltage: ";
    Printer<int64_t>::stream(s, indent + "  ", v.down_limit_voltage);
    s << indent << "up_limit_voltage: ";
    Printer<int64_t>::stream(s, indent + "  ", v.up_limit_voltage);
    s << indent << "max_torque: ";
    Printer<int64_t>::stream(s, indent + "  ", v.max_torque);
    s << indent << "return_level: ";
    Printer<int64_t>::stream(s, indent + "  ", v.return_level);
    s << indent << "alarm_shutdown: ";
    Printer<int64_t>::stream(s, indent + "  ", v.alarm_shutdown);
    s << indent << "torque_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torque_enable);
    s << indent << "led: ";
    Printer<int64_t>::stream(s, indent + "  ", v.led);
    s << indent << "d_gain: ";
    Printer<int64_t>::stream(s, indent + "  ", v.d_gain);
    s << indent << "i_gain: ";
    Printer<int64_t>::stream(s, indent + "  ", v.i_gain);
    s << indent << "p_gain: ";
    Printer<int64_t>::stream(s, indent + "  ", v.p_gain);
    s << indent << "goal_position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_position);
    s << indent << "goal_velocity: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_velocity);
    s << indent << "goal_torque: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goal_torque);
    s << indent << "present_position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.present_position);
    s << indent << "present_velocity: ";
    Printer<int64_t>::stream(s, indent + "  ", v.present_velocity);
    s << indent << "present_load: ";
    Printer<int64_t>::stream(s, indent + "  ", v.present_load);
    s << indent << "present_voltage: ";
    Printer<int64_t>::stream(s, indent + "  ", v.present_voltage);
    s << indent << "present_temperature: ";
    Printer<int64_t>::stream(s, indent + "  ", v.present_temperature);
    s << indent << "registered_instruction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.registered_instruction);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "hardware_error_status: ";
    Printer<int64_t>::stream(s, indent + "  ", v.hardware_error_status);
    s << indent << "punch: ";
    Printer<int64_t>::stream(s, indent + "  ", v.punch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_DYNAMIXELXL_H
