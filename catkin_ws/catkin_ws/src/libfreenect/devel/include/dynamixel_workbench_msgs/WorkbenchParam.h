// Generated by gencpp from file dynamixel_workbench_msgs/WorkbenchParam.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_WORKBENCHPARAM_H
#define DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_WORKBENCHPARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_workbench_msgs
{
template <class ContainerAllocator>
struct WorkbenchParam_
{
  typedef WorkbenchParam_<ContainerAllocator> Type;

  WorkbenchParam_()
    : device_name()
    , baud_rate(0)
    , protocol_version(0)
    , model_name()
    , model_id(0)
    , model_number(0)  {
    }
  WorkbenchParam_(const ContainerAllocator& _alloc)
    : device_name(_alloc)
    , baud_rate(0)
    , protocol_version(0)
    , model_name(_alloc)
    , model_id(0)
    , model_number(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _device_name_type;
  _device_name_type device_name;

   typedef uint64_t _baud_rate_type;
  _baud_rate_type baud_rate;

   typedef uint16_t _protocol_version_type;
  _protocol_version_type protocol_version;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef uint16_t _model_id_type;
  _model_id_type model_id;

   typedef uint16_t _model_number_type;
  _model_number_type model_number;




  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> const> ConstPtr;

}; // struct WorkbenchParam_

typedef ::dynamixel_workbench_msgs::WorkbenchParam_<std::allocator<void> > WorkbenchParam;

typedef boost::shared_ptr< ::dynamixel_workbench_msgs::WorkbenchParam > WorkbenchParamPtr;
typedef boost::shared_ptr< ::dynamixel_workbench_msgs::WorkbenchParam const> WorkbenchParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dynamixel_workbench_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dynamixel_workbench_msgs': ['/home/cun/catkin_ws/src/dynamixel-workbench/dynamixel_workbench_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efa375577ebd4c49a62b4a8cb3563dbe";
  }

  static const char* value(const ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefa375577ebd4c49ULL;
  static const uint64_t static_value2 = 0xa62b4a8cb3563dbeULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_workbench_msgs/WorkbenchParam";
  }

  static const char* value(const ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Published by dynamixel_workbench_single_manager_gui\n\
# This message sends information of dynamixel_workbench_single_manager's parameter to dynamixel_workbench_single_manager_gui\n\
\n\
string device_name\n\
uint64 baud_rate\n\
uint16 protocol_version\n\
string model_name\n\
uint16 model_id\n\
uint16 model_number\n\
";
  }

  static const char* value(const ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_name);
      stream.next(m.baud_rate);
      stream.next(m.protocol_version);
      stream.next(m.model_name);
      stream.next(m.model_id);
      stream.next(m.model_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorkbenchParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_workbench_msgs::WorkbenchParam_<ContainerAllocator>& v)
  {
    s << indent << "device_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.device_name);
    s << indent << "baud_rate: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.baud_rate);
    s << indent << "protocol_version: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.protocol_version);
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "model_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.model_id);
    s << indent << "model_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.model_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_WORKBENCH_MSGS_MESSAGE_WORKBENCHPARAM_H
